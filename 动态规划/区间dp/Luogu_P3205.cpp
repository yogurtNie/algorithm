//
// Created by 12472 on 25-6-8.
//
#include<bits/stdc++.h>
using namespace std;
const int N = 1010;
const int MOD = 19650827;
int dp[N][N][2];        // 三维的动态规划，因为需要第三维来确认“最后一个插入的是左端点还是右端点”
// 为什么之前对左右端点讨论的时候没有加入第三维，比如打爆气球，因为最后求的最小乘积和，而不是累加方案数，也就是说你不需要知道
// 最后的结果到底是左边还是右边，只需要都讨论一遍然后取最小就好了
// 为什么括号序列也不用加第三维？因为括号序列两个端点状态是绑定的，如果匹配，则继承中间的情况；如果不匹配，则划分
// 这里不同的是，对端点进行讨论，既需要分割左右两端点的状态，也需要分别记录对应的方案
int a[N];
int main()
{
    int n; cin >> n;
    for (int i = 0; i < n; i++) cin >> a[i];

    // 初始化
    // 对于每一个l == r的区间，插入方案是1
    for (int i = 0; i < n; i++) dp[i][i][0] = dp[i][i][1] = 1;
    // 对于每一个l + 1 == r的区间，插入方案取决于数字是否顺序
    // 34 不论是3最后插还是4最后插，都只有1种
    // 43 不论是3最后还是4最后，都只有0种
    for (int i = 0; i < n - 1 ; i++)
    {
        if (a[i] < a[i + 1])
            dp[i][i + 1][0] = dp[i][i + 1][1] = 1;
    }

    // 开始递推
    for (int l = n - 3; l >= 0; l--)
    {
        for (int r = l + 2; r < n; r++)
        {
            // 先左边最后插
            if (a[l] < a[l + 1])
                dp[l][r][0] = (dp[l][r][0] + dp[l + 1][r][0]) % MOD;
            if (a[l] < a[r])
                dp[l][r][0] = (dp[l][r][0] + dp[l + 1][r][1]) % MOD;
            // 再右边最后插
            if (a[r] > a[l])
                dp[l][r][1] = (dp[l][r][1] + dp[l][r - 1][0]) % MOD;
            if (a[r] > a[r - 1])
                dp[l][r][1] = (dp[l][r][1] + dp[l][r - 1][1]) % MOD;
        }
    }
    cout << (dp[0][n - 1][0] + dp[0][n - 1][1]) % MOD << endl;
    return 0;
}